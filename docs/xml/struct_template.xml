<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="struct_template" kind="struct" language="C++" prot="public">
    <compoundname>Template</compoundname>
    <includes refid="compound__detailed_2_file_8h" local="no">File.h</includes>
    <templateparamlist>
      <param>
        <type>class T</type>
      </param>
      <param>
        <type>class U</type>
        <defval>void</defval>
      </param>
      <param>
        <type>class</type>
        <defval>int</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="protected-type">
      <memberdef kind="enum" id="struct_template_1a78bd618022079b3efbf1db104e058c8a" prot="protected" static="no" strong="no">
        <type></type>
        <name>Bar</name>
        <briefdescription>
<para>Enum. </para>        </briefdescription>
        <detaileddescription>
<para>Should have just one template with _3 for unnamed parameter. Should also have the <computeroutput>protected</computeroutput> label in the details. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="m.css/doxygen/test/compound_detailed/File.h" line="35" column="1" bodyfile="m.css/doxygen/test/compound_detailed/File.h" bodystart="35" bodyend="35"/>
      </memberdef>
      <memberdef kind="typedef" id="struct_template_1a661cbea16b59544c9907189d8ccf6da5" prot="protected" static="no">
        <type><ref refid="class_a" kindref="compound">A</ref></type>
        <definition>typedef A Template&lt; T, U, class &gt;::B</definition>
        <argsstring></argsstring>
        <name>B</name>
        <briefdescription>
<para>Typedef. </para>        </briefdescription>
        <detaileddescription>
<para>Should have just one template with _3 for unnamed parameter. Should also have the <computeroutput>protected</computeroutput> label in the details. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="m.css/doxygen/test/compound_detailed/File.h" line="43" column="1" bodyfile="m.css/doxygen/test/compound_detailed/File.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="struct_template_1a94438a80326daae3500ce76ff0048c5e" prot="protected" static="no">
        <type>Buuu&lt; U, false &gt;</type>
        <definition>using Template&lt; T, U, class &gt;::Foo =  Buuu&lt;U, false&gt;</definition>
        <argsstring></argsstring>
        <name>Foo</name>
        <briefdescription>
<para><ref refid="struct_template" kindref="compound">Template</ref> alias. </para>        </briefdescription>
        <detaileddescription>
<para>Should have just one template with _3 for unnamed parameter. Should also have the <computeroutput>protected</computeroutput> label in the details. <ref refid="struct_template" kindref="compound">Template</ref> parameters are tested in <computeroutput>cpp_template_aliases</computeroutput> test as they need newer Doxygen. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="m.css/doxygen/test/compound_detailed/File.h" line="53" column="1" bodyfile="m.css/doxygen/test/compound_detailed/File.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="struct_template_1a6b37f78f11b281740b9daf07f695c0fa" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>bool</type>
            <defval>false</defval>
          </param>
        </templateparamlist>
        <type>Buuu&lt; V, false &gt;</type>
        <definition>using Template&lt; T, U, class &gt;::Foo =  Buuu&lt;V, false&gt;</definition>
        <argsstring></argsstring>
        <name>Foo</name>
        <briefdescription>
<para><ref refid="struct_template" kindref="compound">Template</ref> alias. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>V</parametername>
</parameternamelist>
<parameterdescription>
<para>Well, this is V as well</para></parameterdescription>
</parameteritem>
</parameterlist>
Should include both template lists, with _3 for unnamed parameter. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="m.css/doxygen/test/cpp_template_alias/File.h" line="13" column="1" bodyfile="m.css/doxygen/test/cpp_template_alias/File.h" bodystart="13" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="struct_template_1aaf7ee941db121bdf57653fe4bd8f3f53" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int Template&lt; T, U, class &gt;::a</definition>
        <argsstring></argsstring>
        <name>a</name>
        <briefdescription>
<para>Variable. </para>        </briefdescription>
        <detaileddescription>
<para>Should have just one template with _3 for unnamed parameter. Should also have the <computeroutput>protected</computeroutput> label in the details. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="m.css/doxygen/test/compound_detailed/File.h" line="27" column="1" bodyfile="m.css/doxygen/test/compound_detailed/File.h" bodystart="27" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="struct_template_1af51f2282e44f51eea57a198c123f8b16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Template&lt; T, U, class &gt;::bar</definition>
        <argsstring>()</argsstring>
        <name>bar</name>
        <briefdescription>
<para>Another. </para>        </briefdescription>
        <detaileddescription>
<para>Should have just one template with _3 for unnamed parameter. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="m.css/doxygen/test/compound_detailed/File.h" line="18" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="struct_template_1aab8b2a12ab389309990a2f3d7ae0289e" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>int</type>
            <defval>3</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Template&lt; T, U, class &gt;::foo</definition>
        <argsstring>()</argsstring>
        <name>foo</name>
        <briefdescription>
<para>Function. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>V</parametername>
</parameternamelist>
<parameterdescription>
<para>Well, this is V</para></parameterdescription>
</parameteritem>
</parameterlist>
Should not repeat default parameter from class, should include both U and V in the docs. Should also have the <computeroutput>protected</computeroutput> label in the details. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="m.css/doxygen/test/compound_detailed/File.h" line="63" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Class with template parameters. </para>    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="struct_template" kindref="compound">Template</ref> parameter T </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>U</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="struct_template" kindref="compound">Template</ref> parameter U</para></parameterdescription>
</parameteritem>
</parameterlist>
Should have it displayed on top. </para>    </detaileddescription>
    <location file="m.css/doxygen/test/compound_detailed/File.h" line="12" column="1" bodyfile="m.css/doxygen/test/compound_detailed/File.h" bodystart="12" bodyend="64"/>
    <listofallmembers>
      <member refid="struct_template_1aaf7ee941db121bdf57653fe4bd8f3f53" prot="protected" virt="non-virtual"><scope>Template</scope><name>a</name></member>
      <member refid="struct_template_1a661cbea16b59544c9907189d8ccf6da5" prot="protected" virt="non-virtual"><scope>Template</scope><name>B</name></member>
      <member refid="struct_template_1af51f2282e44f51eea57a198c123f8b16" prot="public" virt="non-virtual"><scope>Template</scope><name>bar</name></member>
      <member refid="struct_template_1a78bd618022079b3efbf1db104e058c8a" prot="protected" virt="non-virtual"><scope>Template</scope><name>Bar</name></member>
      <member refid="struct_template_1a94438a80326daae3500ce76ff0048c5e" prot="protected" virt="non-virtual"><scope>Template</scope><name>Foo</name></member>
      <member refid="struct_template_1a6b37f78f11b281740b9daf07f695c0fa" prot="public" virt="non-virtual"><scope>Template</scope><name>Foo</name></member>
      <member refid="struct_template_1aab8b2a12ab389309990a2f3d7ae0289e" prot="protected" virt="non-virtual"><scope>Template</scope><name>foo</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
